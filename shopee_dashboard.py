import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import numpy as np
import os
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="Ph√¢n t√≠ch d·ªØ li·ªáu Shopee",
    page_icon="üõçÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# H√†m ƒë·ªçc d·ªØ li·ªáu
@st.cache_data
def load_data(file_path="shopee_fake_data.csv"):
    df = pd.read_csv(file_path)
    # Chuy·ªÉn ƒë·ªïi c·ªôt ng√†y th√†nh ƒë·ªãnh d·∫°ng datetime
    df['Ng√†y ƒë·∫∑t h√†ng'] = pd.to_datetime(df['Ng√†y ƒë·∫∑t h√†ng'], format='%d/%m/%Y')
    if 'Ng√†y giao/h·ªßy/ho√†n' in df.columns:
        df['Ng√†y giao/h·ªßy/ho√†n'] = pd.to_datetime(df['Ng√†y giao/h·ªßy/ho√†n'], format='%d/%m/%Y', errors='coerce')
    
    # Th√™m c·ªôt th√°ng
    df['Th√°ng'] = df['Ng√†y ƒë·∫∑t h√†ng'].dt.strftime('%Y-%m')
    
    # Th√™m c·ªôt doanh thu
    df['Doanh thu'] = df['Gi√° sau gi·∫£m'] * df['S·ªë l∆∞·ª£ng']
    
    return df

# Ti√™u ƒë·ªÅ trang
st.title("üõçÔ∏è Ph√¢n t√≠ch d·ªØ li·ªáu Shopee")
st.markdown("Dashboard ph√¢n t√≠ch d·ªØ li·ªáu ƒë∆°n h√†ng v√† t·ª∑ l·ªá ho√†n h·ªßy")

# T·∫£i d·ªØ li·ªáu
try:
    df = load_data()
    st.success("ƒê√£ t·∫£i d·ªØ li·ªáu th√†nh c√¥ng!")
except Exception as e:
    st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
    st.info("Vui l√≤ng ƒë·∫£m b·∫£o file 'shopee_fake_data.csv' ƒë√£ ƒë∆∞·ª£c t·∫°o b·∫±ng c√°ch ch·∫°y file generate_fake_data.py")
    st.stop()

# T·∫°o tabs
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "T·ªïng quan", 
    "Ph√¢n t√≠ch ho√†n h·ªßy", 
    "Ph√¢n t√≠ch theo th·ªùi gian",
    "Ph√¢n t√≠ch theo gi√° tr·ªã",
    "Ph√¢n t√≠ch theo ph∆∞∆°ng th·ª©c thanh to√°n",
    "Ph√¢n t√≠ch theo v·∫≠n chuy·ªÉn"
])

# Tab 1: T·ªïng quan
with tab1:
    st.header("T·ªïng quan d·ªØ li·ªáu")
    
    # T·∫°o 2 c·ªôt
    col1, col2 = st.columns(2)
    
    with col1:
        # Ph√¢n b·ªë tr·∫°ng th√°i ƒë∆°n h√†ng
        st.subheader("Ph√¢n b·ªë tr·∫°ng th√°i ƒë∆°n h√†ng")
        status_counts = df.groupby('Tr·∫°ng th√°i ƒë∆°n h√†ng')['M√£ ƒë∆°n h√†ng'].nunique()
        unique_orders = df['M√£ ƒë∆°n h√†ng'].nunique()
        
        # T·∫°o bi·ªÉu ƒë·ªì tr√≤n v·ªõi Plotly
        fig = px.pie(
            values=status_counts.values,
            names=status_counts.index,
            title="Ph√¢n b·ªë tr·∫°ng th√°i ƒë∆°n h√†ng",
            color_discrete_sequence=px.colors.qualitative.Set3,
            hole=0.4
        )
        
        # Th√™m ph·∫ßn trƒÉm v√†o bi·ªÉu ƒë·ªì
        fig.update_traces(
            textposition='inside',
            textinfo='percent+label',
            hovertemplate='%{label}: %{value} ƒë∆°n<br>%{percent}'
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Hi·ªÉn th·ªã s·ªë li·ªáu
        for status, count in status_counts.items():
            st.write(f"- {status}: {count} ƒë∆°n ({count/unique_orders*100:.2f}%)")
    
    with col2:
        # Ph√¢n b·ªë danh m·ª•c s·∫£n ph·∫©m
        st.subheader("Ph√¢n b·ªë danh m·ª•c s·∫£n ph·∫©m")
        category_counts = df['Danh m·ª•c s·∫£n ph·∫©m'].value_counts()
        total_products = len(df)
        
        # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
        fig = px.bar(
            x=category_counts.index,
            y=category_counts.values,
            title="Ph√¢n b·ªë danh m·ª•c s·∫£n ph·∫©m",
            labels={'x': 'Danh m·ª•c', 'y': 'S·ªë l∆∞·ª£ng s·∫£n ph·∫©m'},
            color=category_counts.values,
            color_continuous_scale=px.colors.sequential.Viridis
        )
        
        # Th√™m ph·∫ßn trƒÉm l√™n ƒë·∫ßu m·ªói c·ªôt
        fig.update_traces(
            text=[f"{count} ({count/total_products*100:.1f}%)" for count in category_counts.values],
            textposition='outside'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Th√¥ng tin t·ªïng quan
    st.subheader("Th√¥ng tin t·ªïng quan")
    
    # T·∫°o 4 c·ªôt cho c√°c metrics
    metric1, metric2, metric3, metric4 = st.columns(4)
    
    with metric1:
        st.metric(
            label="T·ªïng s·ªë ƒë∆°n h√†ng", 
            value=f"{unique_orders:,}"
        )
    
    with metric2:
        total_revenue = df['Doanh thu'].sum()
        st.metric(
            label="T·ªïng doanh thu", 
            value=f"{total_revenue:,.0f} VNƒê"
        )
    
    with metric3:
        canceled_rate = status_counts.get('ƒê√£ h·ªßy', 0) / unique_orders * 100
        st.metric(
            label="T·ª∑ l·ªá h·ªßy ƒë∆°n", 
            value=f"{canceled_rate:.2f}%"
        )
    
    with metric4:
        returned_rate = status_counts.get('ƒê√£ ho√†n tr·∫£', 0) / unique_orders * 100
        st.metric(
            label="T·ª∑ l·ªá ho√†n tr·∫£", 
            value=f"{returned_rate:.2f}%"
        )

# Tab 2: Ph√¢n t√≠ch ho√†n h·ªßy
with tab2:
    st.header("Ph√¢n t√≠ch ƒë∆°n h√†ng ho√†n h·ªßy")
    
    # L·ªçc d·ªØ li·ªáu c√°c ƒë∆°n ho√†n h·ªßy
    canceled_orders = df[(df['Tr·∫°ng th√°i ƒë∆°n h√†ng'] == 'ƒê√£ h·ªßy') | (df['Tr·∫°ng th√°i ƒë∆°n h√†ng'] == 'ƒê√£ ho√†n tr·∫£')]
    
    # T·∫°o 2 c·ªôt
    col1, col2 = st.columns(2)
    
    with col1:
        # L√Ω do ho√†n h·ªßy
        st.subheader("L√Ω do ho√†n h·ªßy")
        reason_counts = canceled_orders['L√Ω do ho√†n h·ªßy'].value_counts()
        
        # T·∫°o bi·ªÉu ƒë·ªì c·ªôt ngang v·ªõi Plotly
        fig = px.bar(
            y=reason_counts.index,
            x=reason_counts.values,
            title="L√Ω do ho√†n h·ªßy ƒë∆°n h√†ng",
            labels={'y': 'L√Ω do', 'x': 'S·ªë l∆∞·ª£ng ƒë∆°n h√†ng'},
            orientation='h',
            color=reason_counts.values,
            color_continuous_scale=px.colors.sequential.Reds
        )
        
        # Th√™m s·ªë l∆∞·ª£ng v√† ph·∫ßn trƒÉm
        fig.update_traces(
            text=[f"{count} ({count/len(canceled_orders)*100:.1f}%)" for count in reason_counts.values],
            textposition='outside'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Top 10 th∆∞∆°ng hi·ªáu c√≥ t·ª∑ l·ªá ho√†n h·ªßy cao nh·∫•t
        st.subheader("Top 10 th∆∞∆°ng hi·ªáu c√≥ t·ª∑ l·ªá ho√†n h·ªßy cao nh·∫•t")
        
        # T√≠nh t·ª∑ l·ªá ho√†n h·ªßy theo th∆∞∆°ng hi·ªáu
        brand_all = df.groupby('Th∆∞∆°ng hi·ªáu')['M√£ ƒë∆°n h√†ng'].nunique()
        brand_canceled = canceled_orders.groupby('Th∆∞∆°ng hi·ªáu')['M√£ ƒë∆°n h√†ng'].nunique()
        
        brand_rates = {}
        for brand in brand_all.index:
            total_brand = brand_all[brand]
            canceled_brand = brand_canceled.get(brand, 0)
            if total_brand >= 50:  # Ch·ªâ x√©t th∆∞∆°ng hi·ªáu c√≥ √≠t nh·∫•t 50 ƒë∆°n
                rate = canceled_brand / total_brand * 100
                brand_rates[brand] = rate
        
        # S·∫Øp x·∫øp v√† l·∫•y top 10
        brand_rates_series = pd.Series(brand_rates).sort_values(ascending=False).head(10)
        
        # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
        fig = px.bar(
            x=brand_rates_series.index,
            y=brand_rates_series.values,
            title="Top 10 th∆∞∆°ng hi·ªáu c√≥ t·ª∑ l·ªá ho√†n h·ªßy cao nh·∫•t",
            labels={'x': 'Th∆∞∆°ng hi·ªáu', 'y': 'T·ª∑ l·ªá ho√†n h·ªßy (%)'},
            color=brand_rates_series.values,
            color_continuous_scale=px.colors.sequential.Oranges
        )
        
        # Th√™m t·ª∑ l·ªá ph·∫ßn trƒÉm l√™n ƒë·∫ßu m·ªói c·ªôt
        fig.update_traces(
            text=[f"{rate:.1f}%" for rate in brand_rates_series.values],
            textposition='outside'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # T·ª∑ l·ªá ho√†n h·ªßy theo danh m·ª•c s·∫£n ph·∫©m
    st.subheader("T·ª∑ l·ªá ho√†n h·ªßy theo danh m·ª•c s·∫£n ph·∫©m")
    
    # T√≠nh t·ª∑ l·ªá ho√†n h·ªßy theo danh m·ª•c
    category_all = df.groupby('Danh m·ª•c s·∫£n ph·∫©m')['M√£ ƒë∆°n h√†ng'].nunique()
    category_canceled = canceled_orders.groupby('Danh m·ª•c s·∫£n ph·∫©m')['M√£ ƒë∆°n h√†ng'].nunique()
    
    category_rates = {}
    for category in category_all.index:
        total_category = category_all[category]
        canceled_category = category_canceled.get(category, 0)
        rate = canceled_category / total_category * 100
        category_rates[category] = rate
    
    category_rates_series = pd.Series(category_rates)
    
    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
    fig = px.bar(
        x=category_rates_series.index,
        y=category_rates_series.values,
        title="T·ª∑ l·ªá ho√†n h·ªßy theo danh m·ª•c s·∫£n ph·∫©m",
        labels={'x': 'Danh m·ª•c', 'y': 'T·ª∑ l·ªá ho√†n h·ªßy (%)'},
        color=category_rates_series.values,
        color_continuous_scale=px.colors.sequential.Purples
    )
    
    # Th√™m t·ª∑ l·ªá ph·∫ßn trƒÉm l√™n ƒë·∫ßu m·ªói c·ªôt
    fig.update_traces(
        text=[f"{rate:.1f}%" for rate in category_rates_series.values],
        textposition='outside'
    )
    
    st.plotly_chart(fig, use_container_width=True)

# Tab 3: Ph√¢n t√≠ch theo th·ªùi gian
with tab3:
    st.header("Ph√¢n t√≠ch theo th·ªùi gian")
    
    # T·∫°o 2 c·ªôt
    col1, col2 = st.columns(2)
    
    with col1:
        # S·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo th√°ng
        st.subheader("S·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo th√°ng")
        monthly_orders = df.groupby('Th√°ng')['M√£ ƒë∆°n h√†ng'].nunique()
        
        # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
        fig = px.bar(
            x=monthly_orders.index,
            y=monthly_orders.values,
            title="S·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo th√°ng",
            labels={'x': 'Th√°ng', 'y': 'S·ªë l∆∞·ª£ng ƒë∆°n h√†ng'},
            color=monthly_orders.values,
            color_continuous_scale=px.colors.sequential.Blues
        )
        
        # Th√™m s·ªë l∆∞·ª£ng l√™n ƒë·∫ßu m·ªói c·ªôt
        fig.update_traces(
            text=[f"{count:,}" for count in monthly_orders.values],
            textposition='outside'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Doanh thu theo th√°ng
        st.subheader("Doanh thu theo th√°ng")
        monthly_revenue = df.groupby('Th√°ng')['Doanh thu'].sum()
        
        # T·∫°o bi·ªÉu ƒë·ªì ƒë∆∞·ªùng v·ªõi Plotly
        fig = px.line(
            x=monthly_revenue.index,
            y=monthly_revenue.values,
            title="Doanh thu theo th√°ng",
            labels={'x': 'Th√°ng', 'y': 'Doanh thu (VNƒê)'},
            markers=True,
        )
        
        # Th√™m gi√° tr·ªã doanh thu l√™n m·ªói ƒëi·ªÉm
        fig.update_traces(
            text=[f"{revenue:,.0f}" for revenue in monthly_revenue.values],
            textposition='top center'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # T·ª∑ l·ªá ho√†n h·ªßy theo th√°ng
    st.subheader("T·ª∑ l·ªá ho√†n h·ªßy theo th√°ng")
    
    # T√≠nh t·ª∑ l·ªá ho√†n h·ªßy theo th√°ng
    monthly_all = df.groupby('Th√°ng')['M√£ ƒë∆°n h√†ng'].nunique()
    monthly_canceled = canceled_orders.groupby('Th√°ng')['M√£ ƒë∆°n h√†ng'].nunique()
    
    monthly_rates = {}
    for month in monthly_all.index:
        total_month = monthly_all[month]
        canceled_month = monthly_canceled.get(month, 0)
        rate = canceled_month / total_month * 100
        monthly_rates[month] = rate
    
    monthly_rates_series = pd.Series(monthly_rates)
    
    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
    fig = px.bar(
        x=monthly_rates_series.index,
        y=monthly_rates_series.values,
        title="T·ª∑ l·ªá ho√†n h·ªßy theo th√°ng",
        labels={'x': 'Th√°ng', 'y': 'T·ª∑ l·ªá ho√†n h·ªßy (%)'},
        color=monthly_rates_series.values,
        color_continuous_scale=px.colors.sequential.Greens
    )
    
    # Th√™m t·ª∑ l·ªá ph·∫ßn trƒÉm l√™n ƒë·∫ßu m·ªói c·ªôt
    fig.update_traces(
        text=[f"{rate:.1f}%" for rate in monthly_rates_series.values],
        textposition='outside'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Top 5 s·∫£n ph·∫©m b√°n ch·∫°y theo th√°ng
    st.subheader("Top 5 s·∫£n ph·∫©m b√°n ch·∫°y theo th√°ng")
    
    # Ch·ªçn th√°ng ƒë·ªÉ hi·ªÉn th·ªã
    selected_month = st.selectbox(
        "Ch·ªçn th√°ng ƒë·ªÉ xem top 5 s·∫£n ph·∫©m b√°n ch·∫°y:",
        sorted(df['Th√°ng'].unique())
    )
    
    # L·ªçc d·ªØ li·ªáu theo th√°ng ƒë√£ ch·ªçn
    month_data = df[df['Th√°ng'] == selected_month]
    top_products = month_data.groupby('T√™n s·∫£n ph·∫©m')['S·ªë l∆∞·ª£ng'].sum().nlargest(5)
    
    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
    fig = px.bar(
        x=top_products.index,
        y=top_products.values,
        title=f"Top 5 s·∫£n ph·∫©m b√°n ch·∫°y th√°ng {selected_month}",
        labels={'x': 'S·∫£n ph·∫©m', 'y': 'S·ªë l∆∞·ª£ng b√°n'},
        color=top_products.values,
        color_continuous_scale=px.colors.sequential.Viridis
    )
    
    # Th√™m s·ªë l∆∞·ª£ng l√™n ƒë·∫ßu m·ªói c·ªôt
    fig.update_traces(
        text=[f"{quantity:,}" for quantity in top_products.values],
        textposition='outside'
    )
    
    # ƒêi·ªÅu ch·ªânh layout ƒë·ªÉ hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m d√†i
    fig.update_layout(
        xaxis={'tickangle': 45},
        margin={'b': 100}
    )
    
    st.plotly_chart(fig, use_container_width=True)

# Tab 4: Ph√¢n t√≠ch theo gi√° tr·ªã
with tab4:
    st.header("Ph√¢n t√≠ch theo gi√° tr·ªã ƒë∆°n h√†ng")
    
    # T·∫°o c√°c kho·∫£ng gi√° tr·ªã ƒë∆°n h√†ng
    df['Gi√° tr·ªã ƒë∆°n h√†ng'] = df.groupby('M√£ ƒë∆°n h√†ng')['Doanh thu'].transform('sum')
    
    # T·∫°o c√°c nh√≥m gi√° tr·ªã
    def categorize_order_value(value):
        if value < 100000:
            return "D∆∞·ªõi 100K"
        elif value < 200000:
            return "100K-200K"
        elif value < 500000:
            return "200K-500K"
        elif value < 1000000:
            return "500K-1M"
        else:
            return "Tr√™n 1M"
    
    df['Nh√≥m gi√° tr·ªã'] = df['Gi√° tr·ªã ƒë∆°n h√†ng'].apply(categorize_order_value)
    
    # T·∫°o 2 c·ªôt
    col1, col2 = st.columns(2)
    
    with col1:
        # Ph√¢n b·ªë ƒë∆°n h√†ng theo gi√° tr·ªã
        st.subheader("Ph√¢n b·ªë ƒë∆°n h√†ng theo gi√° tr·ªã")
        value_counts = df.drop_duplicates('M√£ ƒë∆°n h√†ng')['Nh√≥m gi√° tr·ªã'].value_counts()
        
        # T·∫°o bi·ªÉu ƒë·ªì tr√≤n v·ªõi Plotly
        fig = px.pie(
            values=value_counts.values,
            names=value_counts.index,
            title="Ph√¢n b·ªë ƒë∆°n h√†ng theo gi√° tr·ªã",
            color_discrete_sequence=px.colors.qualitative.Pastel,
            hole=0.4
        )
        
        # Th√™m ph·∫ßn trƒÉm v√†o bi·ªÉu ƒë·ªì
        fig.update_traces(
            textposition='inside',
            textinfo='percent+label',
            hovertemplate='%{label}: %{value} ƒë∆°n<br>%{percent}'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # T·ª∑ l·ªá ho√†n h·ªßy theo gi√° tr·ªã ƒë∆°n h√†ng
        st.subheader("T·ª∑ l·ªá ho√†n h·ªßy theo gi√° tr·ªã ƒë∆°n h√†ng")
        
        # T√≠nh t·ª∑ l·ªá ho√†n h·ªßy theo gi√° tr·ªã
        value_all = df.drop_duplicates('M√£ ƒë∆°n h√†ng').groupby('Nh√≥m gi√° tr·ªã')['M√£ ƒë∆°n h√†ng'].count()
        value_canceled = df[df['Tr·∫°ng th√°i ƒë∆°n h√†ng'].isin(['ƒê√£ h·ªßy', 'ƒê√£ ho√†n tr·∫£'])].drop_duplicates('M√£ ƒë∆°n h√†ng').groupby('Nh√≥m gi√° tr·ªã')['M√£ ƒë∆°n h√†ng'].count()
        
        value_rates = {}
        for value in value_all.index:
            total_value = value_all[value]
            canceled_value = value_canceled.get(value, 0)
            rate = canceled_value / total_value * 100
            value_rates[value] = rate
        
        value_rates_series = pd.Series(value_rates)
        
        # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
        fig = px.bar(
            x=value_rates_series.index,
            y=value_rates_series.values,
            title="T·ª∑ l·ªá ho√†n h·ªßy theo gi√° tr·ªã ƒë∆°n h√†ng",
            labels={'x': 'Gi√° tr·ªã ƒë∆°n h√†ng', 'y': 'T·ª∑ l·ªá ho√†n h·ªßy (%)'},
            color=value_rates_series.values,
            color_continuous_scale=px.colors.sequential.Reds
        )
        
        # Th√™m t·ª∑ l·ªá ph·∫ßn trƒÉm l√™n ƒë·∫ßu m·ªói c·ªôt
        fig.update_traces(
            text=[f"{rate:.1f}%" for rate in value_rates_series.values],
            textposition='outside'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh theo th√°ng
    st.subheader("Gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh theo th√°ng")
    
    # T√≠nh gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh theo th√°ng
    avg_order_value = df.drop_duplicates('M√£ ƒë∆°n h√†ng').groupby('Th√°ng')['Gi√° tr·ªã ƒë∆°n h√†ng'].mean()
    
    # T·∫°o bi·ªÉu ƒë·ªì ƒë∆∞·ªùng v·ªõi Plotly
    fig = px.line(
        x=avg_order_value.index,
        y=avg_order_value.values,
        title="Gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh theo th√°ng",
        labels={'x': 'Th√°ng', 'y': 'Gi√° tr·ªã trung b√¨nh (VNƒê)'},
        markers=True,
    )
    
    # Th√™m gi√° tr·ªã l√™n m·ªói ƒëi·ªÉm
    fig.update_traces(
        text=[f"{value:,.0f}" for value in avg_order_value.values],
        textposition='top center'
    )
    
    st.plotly_chart(fig, use_container_width=True)

# Tab 5: Ph√¢n t√≠ch theo ph∆∞∆°ng th·ª©c thanh to√°n
with tab5:
    st.header("Ph√¢n t√≠ch theo ph∆∞∆°ng th·ª©c thanh to√°n")
    
    # T·∫°o 2 c·ªôt
    col1, col2 = st.columns(2)
    
    with col1:
        # Ph√¢n b·ªë ƒë∆°n h√†ng theo ph∆∞∆°ng th·ª©c thanh to√°n
        st.subheader("Ph√¢n b·ªë ƒë∆°n h√†ng theo ph∆∞∆°ng th·ª©c thanh to√°n")
        payment_counts = df.drop_duplicates('M√£ ƒë∆°n h√†ng')['Ph∆∞∆°ng th·ª©c thanh to√°n'].value_counts()
        
        # T·∫°o bi·ªÉu ƒë·ªì tr√≤n v·ªõi Plotly
        fig = px.pie(
            values=payment_counts.values,
            names=payment_counts.index,
            title="Ph√¢n b·ªë ƒë∆°n h√†ng theo ph∆∞∆°ng th·ª©c thanh to√°n",
            color_discrete_sequence=px.colors.qualitative.Pastel1,
            hole=0.4
        )
        
        # Th√™m ph·∫ßn trƒÉm v√†o bi·ªÉu ƒë·ªì
        fig.update_traces(
            textposition='inside',
            textinfo='percent+label',
            hovertemplate='%{label}: %{value} ƒë∆°n<br>%{percent}'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # T·ª∑ l·ªá ho√†n h·ªßy theo ph∆∞∆°ng th·ª©c thanh to√°n
        st.subheader("T·ª∑ l·ªá ho√†n h·ªßy theo ph∆∞∆°ng th·ª©c thanh to√°n")
        
        # T√≠nh t·ª∑ l·ªá ho√†n h·ªßy theo ph∆∞∆°ng th·ª©c thanh to√°n
        payment_all = df.drop_duplicates('M√£ ƒë∆°n h√†ng').groupby('Ph∆∞∆°ng th·ª©c thanh to√°n')['M√£ ƒë∆°n h√†ng'].count()
        payment_canceled = df[df['Tr·∫°ng th√°i ƒë∆°n h√†ng'].isin(['ƒê√£ h·ªßy', 'ƒê√£ ho√†n tr·∫£'])].drop_duplicates('M√£ ƒë∆°n h√†ng').groupby('Ph∆∞∆°ng th·ª©c thanh to√°n')['M√£ ƒë∆°n h√†ng'].count()
        
        payment_rates = {}
        for payment in payment_all.index:
            total_payment = payment_all[payment]
            canceled_payment = payment_canceled.get(payment, 0)
            rate = canceled_payment / total_payment * 100
            payment_rates[payment] = rate
        
        payment_rates_series = pd.Series(payment_rates)
        
        # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
        fig = px.bar(
            x=payment_rates_series.index,
            y=payment_rates_series.values,
            title="T·ª∑ l·ªá ho√†n h·ªßy theo ph∆∞∆°ng th·ª©c thanh to√°n",
            labels={'x': 'Ph∆∞∆°ng th·ª©c thanh to√°n', 'y': 'T·ª∑ l·ªá ho√†n h·ªßy (%)'},
            color=payment_rates_series.values,
            color_continuous_scale=px.colors.sequential.Purples
        )
        
        # Th√™m t·ª∑ l·ªá ph·∫ßn trƒÉm l√™n ƒë·∫ßu m·ªói c·ªôt
        fig.update_traces(
            text=[f"{rate:.1f}%" for rate in payment_rates_series.values],
            textposition='outside'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh theo ph∆∞∆°ng th·ª©c thanh to√°n
    st.subheader("Gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh theo ph∆∞∆°ng th·ª©c thanh to√°n")
    
    # T√≠nh gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh theo ph∆∞∆°ng th·ª©c thanh to√°n
    avg_payment_value = df.drop_duplicates('M√£ ƒë∆°n h√†ng').groupby('Ph∆∞∆°ng th·ª©c thanh to√°n')['Gi√° tr·ªã ƒë∆°n h√†ng'].mean()
    
    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
    fig = px.bar(
        x=avg_payment_value.index,
        y=avg_payment_value.values,
        title="Gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh theo ph∆∞∆°ng th·ª©c thanh to√°n",
        labels={'x': 'Ph∆∞∆°ng th·ª©c thanh to√°n', 'y': 'Gi√° tr·ªã trung b√¨nh (VNƒê)'},
        color=avg_payment_value.values,
        color_continuous_scale=px.colors.sequential.Blues
    )
    
    # Th√™m gi√° tr·ªã l√™n ƒë·∫ßu m·ªói c·ªôt
    fig.update_traces(
        text=[f"{value:,.0f}" for value in avg_payment_value.values],
        textposition='outside'
    )
    
    st.plotly_chart(fig, use_container_width=True)

# Tab 6: Ph√¢n t√≠ch theo v·∫≠n chuy·ªÉn
with tab6:
    st.header("Ph√¢n t√≠ch theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn")
    
    # T·∫°o 2 c·ªôt
    col1, col2 = st.columns(2)
    
    with col1:
        # Ph√¢n b·ªë ƒë∆°n h√†ng theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn
        st.subheader("Ph√¢n b·ªë ƒë∆°n h√†ng theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn")
        shipping_counts = df.drop_duplicates('M√£ ƒë∆°n h√†ng')['ƒê∆°n v·ªã v·∫≠n chuy·ªÉn'].value_counts()
        
        # T·∫°o bi·ªÉu ƒë·ªì tr√≤n v·ªõi Plotly
        fig = px.pie(
            values=shipping_counts.values,
            names=shipping_counts.index,
            title="Ph√¢n b·ªë ƒë∆°n h√†ng theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn",
            color_discrete_sequence=px.colors.qualitative.Pastel2,
            hole=0.4
        )
        
        # Th√™m ph·∫ßn trƒÉm v√†o bi·ªÉu ƒë·ªì
        fig.update_traces(
            textposition='inside',
            textinfo='percent+label',
            hovertemplate='%{label}: %{value} ƒë∆°n<br>%{percent}'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # T·ª∑ l·ªá ho√†n h·ªßy theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn
        st.subheader("T·ª∑ l·ªá ho√†n h·ªßy theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn")
        
        # T√≠nh t·ª∑ l·ªá ho√†n h·ªßy theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn
        shipping_all = df.drop_duplicates('M√£ ƒë∆°n h√†ng').groupby('ƒê∆°n v·ªã v·∫≠n chuy·ªÉn')['M√£ ƒë∆°n h√†ng'].count()
        shipping_canceled = df[df['Tr·∫°ng th√°i ƒë∆°n h√†ng'].isin(['ƒê√£ h·ªßy', 'ƒê√£ ho√†n tr·∫£'])].drop_duplicates('M√£ ƒë∆°n h√†ng').groupby('ƒê∆°n v·ªã v·∫≠n chuy·ªÉn')['M√£ ƒë∆°n h√†ng'].count()
        
        shipping_rates = {}
        for shipping in shipping_all.index:
            total_shipping = shipping_all[shipping]
            canceled_shipping = shipping_canceled.get(shipping, 0)
            rate = canceled_shipping / total_shipping * 100
            shipping_rates[shipping] = rate
        
        shipping_rates_series = pd.Series(shipping_rates)
        
        # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
        fig = px.bar(
            x=shipping_rates_series.index,
            y=shipping_rates_series.values,
            title="T·ª∑ l·ªá ho√†n h·ªßy theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn",
            labels={'x': 'ƒê∆°n v·ªã v·∫≠n chuy·ªÉn', 'y': 'T·ª∑ l·ªá ho√†n h·ªßy (%)'},
            color=shipping_rates_series.values,
            color_continuous_scale=px.colors.sequential.Blues
        )
        
        # Th√™m t·ª∑ l·ªá ph·∫ßn trƒÉm l√™n ƒë·∫ßu m·ªói c·ªôt
        fig.update_traces(
            text=[f"{rate:.1f}%" for rate in shipping_rates_series.values],
            textposition='outside'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Th·ªùi gian giao h√†ng trung b√¨nh theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn
    st.subheader("Th·ªùi gian giao h√†ng trung b√¨nh theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn")
    
    # T√≠nh th·ªùi gian giao h√†ng
    delivered_orders = df[df['Tr·∫°ng th√°i ƒë∆°n h√†ng'] == 'ƒê√£ giao th√†nh c√¥ng'].drop_duplicates('M√£ ƒë∆°n h√†ng')
    delivered_orders['Th·ªùi gian giao h√†ng'] = (delivered_orders['Ng√†y giao/h·ªßy/ho√†n'] - delivered_orders['Ng√†y ƒë·∫∑t h√†ng']).dt.days
    
    # T√≠nh th·ªùi gian giao h√†ng trung b√¨nh theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn
    avg_delivery_time = delivered_orders.groupby('ƒê∆°n v·ªã v·∫≠n chuy·ªÉn')['Th·ªùi gian giao h√†ng'].mean()
    
    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
    fig = px.bar(
        x=avg_delivery_time.index,
        y=avg_delivery_time.values,
        title="Th·ªùi gian giao h√†ng trung b√¨nh theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn",
        labels={'x': 'ƒê∆°n v·ªã v·∫≠n chuy·ªÉn', 'y': 'Th·ªùi gian giao h√†ng (ng√†y)'},
        color=avg_delivery_time.values,
        color_continuous_scale=px.colors.sequential.Greens
    )
    
    # Th√™m gi√° tr·ªã l√™n ƒë·∫ßu m·ªói c·ªôt
    fig.update_traces(
        text=[f"{value:.1f} ng√†y" for value in avg_delivery_time.values],
        textposition='outside'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Ph√≠ v·∫≠n chuy·ªÉn trung b√¨nh theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn
    st.subheader("Ph√≠ v·∫≠n chuy·ªÉn trung b√¨nh theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn")
    
    # T√≠nh ph√≠ v·∫≠n chuy·ªÉn trung b√¨nh theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn
    avg_shipping_fee = df.drop_duplicates('M√£ ƒë∆°n h√†ng').groupby('ƒê∆°n v·ªã v·∫≠n chuy·ªÉn')['Ph√≠ v·∫≠n chuy·ªÉn'].mean()
    
    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi Plotly
    fig = px.bar(
        x=avg_shipping_fee.index,
        y=avg_shipping_fee.values,
        title="Ph√≠ v·∫≠n chuy·ªÉn trung b√¨nh theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn",
        labels={'x': 'ƒê∆°n v·ªã v·∫≠n chuy·ªÉn', 'y': 'Ph√≠ v·∫≠n chuy·ªÉn (VNƒê)'},
        color=avg_shipping_fee.values,
        color_continuous_scale=px.colors.sequential.Oranges
    )
    
    # Th√™m gi√° tr·ªã l√™n ƒë·∫ßu m·ªói c·ªôt
    fig.update_traces(
        text=[f"{value:,.0f}" for value in avg_shipping_fee.values],
        textposition='outside'
    )
    
    st.plotly_chart(fig, use_container_width=True)

# Sidebar v·ªõi c√°c b·ªô l·ªçc
st.sidebar.title("B·ªô l·ªçc d·ªØ li·ªáu")

# L·ªçc theo kho·∫£ng th·ªùi gian
st.sidebar.header("Kho·∫£ng th·ªùi gian")
min_date = df['Ng√†y ƒë·∫∑t h√†ng'].min().date()
max_date = df['Ng√†y ƒë·∫∑t h√†ng'].max().date()
start_date = st.sidebar.date_input("T·ª´ ng√†y", min_date)
end_date = st.sidebar.date_input("ƒê·∫øn ng√†y", max_date)

# L·ªçc theo tr·∫°ng th√°i ƒë∆°n h√†ng
st.sidebar.header("Tr·∫°ng th√°i ƒë∆°n h√†ng")
status_options = df['Tr·∫°ng th√°i ƒë∆°n h√†ng'].unique()
selected_status = st.sidebar.multiselect("Ch·ªçn tr·∫°ng th√°i", status_options, default=status_options)

# L·ªçc theo danh m·ª•c s·∫£n ph·∫©m
st.sidebar.header("Danh m·ª•c s·∫£n ph·∫©m")
category_options = df['Danh m·ª•c s·∫£n ph·∫©m'].unique()
selected_categories = st.sidebar.multiselect("Ch·ªçn danh m·ª•c", category_options, default=category_options)

# L·ªçc theo ph∆∞∆°ng th·ª©c thanh to√°n
st.sidebar.header("Ph∆∞∆°ng th·ª©c thanh to√°n")
payment_options = df['Ph∆∞∆°ng th·ª©c thanh to√°n'].unique()
selected_payments = st.sidebar.multiselect("Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n", payment_options, default=payment_options)

# L·ªçc theo ƒë∆°n v·ªã v·∫≠n chuy·ªÉn
st.sidebar.header("ƒê∆°n v·ªã v·∫≠n chuy·ªÉn")
shipping_options = df['ƒê∆°n v·ªã v·∫≠n chuy·ªÉn'].unique()
selected_shipping = st.sidebar.multiselect("Ch·ªçn ƒë∆°n v·ªã v·∫≠n chuy·ªÉn", shipping_options, default=shipping_options)

# N√∫t √°p d·ª•ng b·ªô l·ªçc
if st.sidebar.button("√Åp d·ª•ng b·ªô l·ªçc"):
    # L·ªçc d·ªØ li·ªáu theo c√°c ƒëi·ªÅu ki·ªán ƒë√£ ch·ªçn
    filtered_df = df[
        (df['Ng√†y ƒë·∫∑t h√†ng'].dt.date >= start_date) &
        (df['Ng√†y ƒë·∫∑t h√†ng'].dt.date <= end_date) &
        (df['Tr·∫°ng th√°i ƒë∆°n h√†ng'].isin(selected_status)) &
        (df['Danh m·ª•c s·∫£n ph·∫©m'].isin(selected_categories)) &
        (df['Ph∆∞∆°ng th·ª©c thanh to√°n'].isin(selected_payments)) &
        (df['ƒê∆°n v·ªã v·∫≠n chuy·ªÉn'].isin(selected_shipping))
    ]
    
    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ d·ªØ li·ªáu ƒë√£ l·ªçc
    st.sidebar.success(f"ƒê√£ l·ªçc: {filtered_df['M√£ ƒë∆°n h√†ng'].nunique()} ƒë∆°n h√†ng")
    
    # L∆∞u d·ªØ li·ªáu ƒë√£ l·ªçc v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng trong to√†n b·ªô ·ª©ng d·ª•ng
    st.session_state['filtered_data'] = filtered_df
    
    # S·ª≠ d·ª•ng st.rerun thay v√¨ st.experimental_rerun (ƒë√£ b·ªã deprecated)
    st.rerun()
else:
    # N·∫øu ch∆∞a √°p d·ª•ng b·ªô l·ªçc, s·ª≠ d·ª•ng d·ªØ li·ªáu g·ªëc ho·∫∑c d·ªØ li·ªáu ƒë√£ l·ªçc t·ª´ session state
    if 'filtered_data' in st.session_state:
        df = st.session_state['filtered_data']
        st.sidebar.info(f"ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l·ªçc: {df['M√£ ƒë∆°n h√†ng'].nunique()} ƒë∆°n h√†ng")

# Th√™m th√¥ng tin v·ªÅ d·ª± √°n
st.sidebar.markdown("---")
st.sidebar.info(
    """
    **D·ª± √°n ph√¢n t√≠ch d·ªØ li·ªáu Shopee**
    
    Ph√¢n t√≠ch 50,000 ƒë∆°n h√†ng t·ª´ d·ªØ li·ªáu Shopee, t·∫≠p trung v√†o c√°c ch·ªâ s·ªë ho√†n h·ªßy v√† hi·ªáu su·∫•t theo nhi·ªÅu kh√≠a c·∫°nh.
    
    D·ªØ li·ªáu ƒë∆∞·ª£c t·∫°o b·∫±ng file generate_fake_data.py
    """
)

# Th√™m t√≠nh nƒÉng t·∫£i xu·ªëng d·ªØ li·ªáu
st.sidebar.markdown("---")
st.sidebar.header("T·∫£i xu·ªëng d·ªØ li·ªáu")

@st.cache_data
def convert_df_to_csv(df):
    return df.to_csv(index=False).encode('utf-8')

csv = convert_df_to_csv(df)
st.sidebar.download_button(
    label="T·∫£i xu·ªëng d·ªØ li·ªáu CSV",
    data=csv,
    file_name='shopee_data_export.csv',
    mime='text/csv',
)

# Th√™m t√≠nh nƒÉng xem d·ªØ li·ªáu th√¥
st.sidebar.markdown("---")
if st.sidebar.checkbox("Xem d·ªØ li·ªáu th√¥"):
    st.subheader("D·ªØ li·ªáu th√¥")
    st.dataframe(df) 